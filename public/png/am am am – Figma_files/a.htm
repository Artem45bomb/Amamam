<!DOCTYPE html>
<html><script async="" src="a_data/shim.js"></script><script>
    window[Symbol.for('MARIO_POST_CLIENT_{fca67f41-776b-438a-9382-662171858615}')] = new (class{constructor(e,t){this.name=e,this.destination=t,this.serverListeners={},this.bgRequestsListeners={},this.bgEventsListeners={},window.addEventListener("message",(e=>{const t=e.data,s=!(t.destination&&t.destination===this.name),n=!t.event;if(!s&&!n)if("MARIO_POST_SERVER__BG_RESPONSE"===t.event){const e=t.args;if(this.hasBgRequestListener(e.requestId)){try{this.bgRequestsListeners[e.requestId](e.response)}catch(e){}delete this.bgRequestsListeners[e.requestId]}}else if("MARIO_POST_SERVER__BG_EVENT"===t.event){const e=t.args;if(this.hasBgEventListener(e.event))try{this.bgEventsListeners[t.id](e.payload)}catch(e){}}else if(this.hasServerListener(t.event))try{this.serverListeners[t.event](t.args)}catch(e){}}))}emitToServer(e,t){const s=this.generateUIID(),n={args:t,destination:this.destination,event:e,id:s};return window.postMessage(n,location.origin),s}emitToBg(e,t){const s=this.generateUIID(),n={bgEventName:e,requestId:s,args:t};return this.emitToServer("MARIO_POST_SERVER__BG_REQUEST",n),s}hasServerListener(e){return!!this.serverListeners[e]}hasBgRequestListener(e){return!!this.bgRequestsListeners[e]}hasBgEventListener(e){return!!this.bgEventsListeners[e]}fromServerEvent(e,t){this.serverListeners[e]=t}fromBgEvent(e,t){this.bgEventsListeners[e]=t}fromBgResponse(e,t){this.bgRequestsListeners[e]=t}generateUIID(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))}})('MARIO_POST_CLIENT_{fca67f41-776b-438a-9382-662171858615}', 'MARIO_POST_SERVER_{fca67f41-776b-438a-9382-662171858615}')</script><script>
    const hideMyLocation = new (class{constructor(t){this.clientKey=t,this.watchIDs={},this.client=window[Symbol.for(t)];const e=navigator.geolocation.getCurrentPosition,o=navigator.geolocation.watchPosition,n=navigator.geolocation.clearWatch,i=this;navigator.geolocation.getCurrentPosition=function(t,o,n){i.handle(e,"GET",t,o,n)},navigator.geolocation.watchPosition=function(t,e,n){return i.handle(o,"WATCH",t,e,n)},navigator.geolocation.clearWatch=function(t){if(-1===t)return;const e=i.watchIDs[t];return delete i.watchIDs[t],n.apply(this,[e])}}handle(t,e,o,n,i){const a=this.client.emitToBg("HIDE_MY_LOCATION__GET_LOCATION");let r=this.getRandomInt(0,1e5);if(this.client.fromBgResponse(a,(a=>{if(a.enabled)if("SUCCESS"===a.status){const t=this.map(a);o(t)}else{const t=this.errorObj();n(t),r=-1}else{const a=[o,n,i],c=t.apply(navigator.geolocation,a);"WATCH"===e&&(this.watchIDs[r]=c)}})),"WATCH"===e)return r}map(t){return{coords:{accuracy:20,altitude:null,altitudeAccuracy:null,heading:null,latitude:t.latitude,longitude:t.longitude,speed:null},timestamp:Date.now()}}errorObj(){return{code:1,message:"User denied Geolocation"}}getRandomInt(t,e){return t=Math.ceil(t),e=Math.floor(e),Math.floor(Math.random()*(e-t+1))+t}})('MARIO_POST_CLIENT_{fca67f41-776b-438a-9382-662171858615}')
  </script><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta http-equiv="Content-Security-Policy" content="img-src data: https://*.mux.com;
          connect-src blob: data: https://api.sprig.com https://*.mux.com https://storage.googleapis.com https://cdn.sprig.com https://cdn.userleap.com;
          font-src data: https://fonts.gstatic.com;
          media-src blob: https://*.mux.com;
          worker-src blob:;">
  <script ecommerce-type="extend-native-history-api">(()=>{const e=history.pushState,t=history.replaceState,a=history.back,r=history.forward;function n(){window.postMessage({_custom_type_:"CUSTOM_ON_URL_CHANGED"})}history.pushState=function(){e.apply(history,arguments),n()},history.replaceState=function(){t.apply(history,arguments),n()},history.back=function(){a.apply(history,arguments),n()},history.forward=function(){r.apply(history,arguments),n()}})()</script><script>(function inject(e){function SendXHRCandidate(e,t,n,r,i){try{var o="detector",s={posdMessageId:"PANELOS_MESSAGE",posdHash:(Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)).substring(0,22),type:"VIDEO_XHR_CANDIDATE",from:o,to:o.substring(0,6),content:{requestMethod:e,url:t,type:n,content:r}};i&&i[0]&&i[0].length&&(s.content.encodedPostBody=i[0]),window.postMessage(s,"*")}catch(e){}}var t=XMLHttpRequest.prototype.open;XMLHttpRequest.prototype.open=function(){this.requestMethod=arguments[0],t.apply(this,arguments)};var n=XMLHttpRequest.prototype.send;XMLHttpRequest.prototype.send=function(){var t=Object.assign(arguments,{}),r=this.onreadystatechange;return this.onreadystatechange=function(){if(4!==this.readyState||function isFrameInBlackList(t){return e.some((function(e){return t.includes(e)}))}(this.responseURL)||setTimeout(SendXHRCandidate(this.requestMethod,this.responseURL,this.getResponseHeader("content-type"),this.response,t),0),r)return r.apply(this,arguments)},n.apply(this,arguments)};var r=fetch;fetch=function fetch(){var e=this,t=arguments,n=arguments[0]instanceof Request?arguments[0].url:arguments[0],i=arguments[0]instanceof Request?arguments[0].method:"GET";return new Promise((function(o,s){r.apply(e,t).then((function(e){if(e.body instanceof ReadableStream){var t=e.json;e.json=function(){var r=arguments,o=this;return new Promise((function(s,a){t.apply(o,r).then((function(t){setTimeout(SendXHRCandidate(i,n,e.headers.get("content-type"),JSON.stringify(t)),0),s(t)})).catch((function(e){a(e)}))}))};var r=e.text;e.text=function(){var t=arguments,o=this;return new Promise((function(s,a){r.apply(o,t).then((function(t){setTimeout(SendXHRCandidate(i,n,e.headers.get("content-type"),t),0),s(t)})).catch((function(e){a(e)}))}))}}o.apply(this,arguments)})).catch((function(){s.apply(this,arguments)}))}))}})(["facebook.com/","twitter.com/","youtube-nocookie.com/embed/","//vk.com/","//www.vk.com/","//linkedin.com/","//www.linkedin.com/","//instagram.com/","//www.instagram.com/","//www.google.com/recaptcha/api2/","//hangouts.google.com/webchat/","//www.google.com/calendar/","//www.google.com/maps/embed","spotify.com/","soundcloud.com/","//player.vimeo.com/","//disqus.com/","//tgwidget.com/","//js.driftt.com/","friends2follow.com","/widget","login","//video.bigmir.net/","blogger.com","//smartlock.google.com/","//keep.google.com/","/web.tolstoycomments.com/","moz-extension://","chrome-extension://","/auth/","//analytics.google.com/","adclarity.com","paddle.com/checkout","hcaptcha.com","recaptcha.net","2captcha.com","accounts.google.com","www.google.com/shopping/customerreviews","buy.tinypass.com","gstatic.com","secureir.ebaystatic.com","docs.google.com","contacts.google.com","github.com","mail.google.com","chat.google.com","audio.xpleer.com","keepa.com","static.xx.fbcdn.net"]);</script></head>
  <body bis_status="ok" bis_frame_id="15032385540">
    <script>
      let localStorageOrNull = null
      try {
        localStorageOrNull = window.localStorage
      } catch {}

      const SPRIG_IDS_LOCAL_STORAGE_KEY = 'userleap.ids'
      const SESSION_CREATED_AT_LOCAL_STORAGE_KEY = 'sprig_session_created_at'
      const REQUEST_PERMISSION_TO_SHOW_SURVEY_TIMEOUT_MS = 250

      const MessageType = {
        SDKReady: 'sdkReady',
        Call: 'call',
        SetProperty: 'setProperty',
        GetProperty: 'getProperty',
        SetContainerDimensions: 'setContainerDimensions',
        Error: 'error',
        GetPermissionToShowSurvey: 'getPermissionToShowSurvey',
        SurveyClosed: 'surveyClosed',
      }

      function arrayEquals(a, b) {
        return (
          Array.isArray(a) &&
          Array.isArray(b) &&
          a.length === b.length &&
          a.every((val, index) => val === b[index])
        )
      }

      ;(function (parentUrl, invalidateSessionsOlderThan) {
        function messageParent(message) {
          if (!parent) throw new Error('Tried to message inexistent parent')
          console.debug(`[Sprigma] ðŸ“¦ Sending message to parent at ${parentUrl}:`, message)
          parent.postMessage(message, parentUrl)
        }

        function setContainerDimensions(height, width) {
          console.debug(
            `[Sprigma] ðŸ“¦ Setting container dimensions: height=${
              height === undefined ? 'unchanged' : height
            } width=${width === undefined ? 'unchanged' : width}`,
          )
          messageParent({
            type: MessageType.SetContainerDimensions,
            content: {
              height,
              width,
            },
          })
        }

        let isSDKReady = false
        const startTime = Date.now()
        const busyWaitForWindowSprig = setInterval(function () {
          if (window.Sprig && window.Sprig.UPDATES) {
            console.debug(
              `[Sprigma] ðŸ“¦ Detected that window.Sprig is now available, time elapsed: ${
                Date.now() - startTime
              }ms`,
            )
            window.Sprig.maxHeight = '100vh'

            window.Sprig('addListener', window.Sprig.UPDATES.SDK_READY, function () {
              const timeElapsed = Date.now() - startTime
              console.debug(`[Sprigma] ðŸ“¦ Sprig SDK reported readiness, time elapsed: ${timeElapsed}ms`)

              // Potentially invalidate existing Sprig session if it's older than threshold
              if (localStorageOrNull && localStorageOrNull.getItem(SPRIG_IDS_LOCAL_STORAGE_KEY) !== null) {
                const sessionCreatedAt = parseInt(
                  localStorageOrNull.getItem(SESSION_CREATED_AT_LOCAL_STORAGE_KEY),
                  10,
                )
                if (Number.isNaN(sessionCreatedAt) || sessionCreatedAt < invalidateSessionsOlderThan) {
                  console.debug('[Sprigma] ðŸ“¦ Invalidating existing session', {
                    sessionCreatedAt,
                    invalidateSessionsOlderThan,
                  })
                  window.Sprig('logoutUser')
                  try {
                    localStorageOrNull.setItem(SESSION_CREATED_AT_LOCAL_STORAGE_KEY, Date.now())
                  } catch {}
                }
              }

              messageParent({ type: MessageType.SDKReady, content: { timeToReadinessInMs: timeElapsed } })
              isSDKReady = true
            })
            window.Sprig('addListener', window.Sprig.UPDATES.SURVEY_PRESENTED, function () {
              console.debug('[Sprigma] ðŸ“¦ Sprig SDK reported that a survey has presented')
              let surveyIframe, height, width
              const busyWaitForDimensions = setInterval(function () {
                if (!surveyIframe) {
                  surveyIframe = document.getElementById(window.Sprig.frameId)
                }
                if (height === undefined && surveyIframe && surveyIframe.style.height) {
                  height = surveyIframe.style.height
                }
                if (width === undefined && surveyIframe && surveyIframe.style.width) {
                  width = surveyIframe.style.width
                }
                if (height && width) {
                  setContainerDimensions(height, width)
                  clearInterval(busyWaitForDimensions)
                }
              }, 1)
            })
            window.Sprig('addListener', window.Sprig.UPDATES.SURVEY_HEIGHT, function (data) {
              console.debug('[Sprigma] ðŸ“¦ Sprig SDK reported that survey height has changed')
              setContainerDimensions(data.contentFrameHeight)
            })
            window.Sprig('addListener', window.Sprig.UPDATES.SURVEY_CLOSED, function () {
              console.debug('[Sprigma] ðŸ“¦ Sprig SDK reported that a survey has closed')
              setContainerDimensions(0, 0)
              messageParent({ type: MessageType.SurveyClosed })
            })

            clearInterval(busyWaitForWindowSprig)
          }
        }, 1)

        function expectSprigSDKToBeReady() {
          if (!isSDKReady) throw new Error('Expected Sprig SDK to be ready when itâ€™s not')
        }

        const outstandingRequestsForPermissionToShowSurvey = {}
        async function requestPermissionToShowSurvey(surveyId) {
          console.debug(`[Sprigma] ðŸ“¦ Requesting permission to show survey ${surveyId}`)
          messageParent({
            type: MessageType.GetPermissionToShowSurvey,
            content: {
              surveyId,
            },
          })

          let promise
          promise = new Promise((resolve) => {
            const timeout = setTimeout(() => {
              console.warn(
                `[Sprigma] ðŸ“¦ Timed out waiting for parent to grant permission to show survey ${surveyId} after ${REQUEST_PERMISSION_TO_SHOW_SURVEY_TIMEOUT_MS}ms, not showing`,
              )
              resolve(false)
            }, REQUEST_PERMISSION_TO_SHOW_SURVEY_TIMEOUT_MS)

            const callback = (canShow) => {
              clearTimeout(timeout)
              console.debug(
                `[Sprigma] ðŸ“¦ Signaling Sprig SDK to ${
                  canShow ? 'allow' : 'deny'
                } survey ${surveyId} to show`,
              )
              resolve(canShow)
            }

            if (outstandingRequestsForPermissionToShowSurvey[surveyId]) {
              console.warn(
                `[Sprigma] ðŸ“¦ Request for permission to show survey ${surveyId} is already in progress`,
              )
              // Chaining the outcome of this request to the existing request for the same survey
              outstandingRequestsForPermissionToShowSurvey[surveyId].promise =
                outstandingRequestsForPermissionToShowSurvey[surveyId].promise.then(callback)
            } else {
              outstandingRequestsForPermissionToShowSurvey[surveyId] = { promise, callback }
            }
          }).finally(() => {
            outstandingRequestsForPermissionToShowSurvey[surveyId] = undefined
          })

          return await promise
        }

        function call(...args) {
          expectSprigSDKToBeReady()
          const modifiedArgs = [...args]

          if (args.length >= 2) {
            if (args[0] === 'track') {
              while (modifiedArgs.length < 4) {
                modifiedArgs.push(undefined)
              }
              modifiedArgs.push(requestPermissionToShowSurvey)
            } else if (args[0] === 'identifyAndTrack') {
              if (args[1] === undefined || args[1] === null || args[1].constructor !== Object)
                throw Error(`Expected second argument of Sprig('identifyAndTrack', ...) to be an object`)
              modifiedArgs[1] = { ...modifiedArgs[1], showSurveyCallback: requestPermissionToShowSurvey }
            } else if (args[0] === 'trackPageView') {
              while (modifiedArgs.length < 3) {
                modifiedArgs.push(undefined)
              }
              modifiedArgs.push(requestPermissionToShowSurvey)
            }
          }

          if (!arrayEquals(args, modifiedArgs)) {
            console.debug(`[Sprigma] ðŸ“¦ Call arguments have been modified:`, modifiedArgs)
          }
          window.Sprig(...modifiedArgs)
        }

        function getProperty(name) {
          expectSprigSDKToBeReady()
          return window.Sprig[name]
        }

        function setProperty(name, value) {
          expectSprigSDKToBeReady()
          window.Sprig[name] = value
        }

        function processMessage(message) {
          const { type, content } = message || {}

          if (!type || !content) {
            console.warn('[Sprigma] ðŸ“¦ Ignoring malformed message:', message)
            return
          }

          switch (type) {
            case MessageType.Call: {
              const { args } = content || {}
              if (!Array.isArray(args))
                throw new Error(
                  `Field 'args' must be provided and be an array for '${MessageType.Call}' messages`,
                )
              console.debug('[Sprigma] ðŸ“¦ Calling Sprig() with args:', ...args)
              call(...args)
              break
            }

            case MessageType.GetProperty: {
              const { name } = content || {}
              if (!name)
                throw new Error(`Field 'name' must be provided for '${MessageType.GetProperty}' messages`)
              console.debug(
                `[Sprigma] ðŸ“¦ Getting property Sprig.${name}, which currently has value:`,
                getProperty(name),
              )
              messageParent({
                type: MessageType.GetProperty,
                content: {
                  name,
                  value: getProperty(name),
                },
              })
              break
            }

            case MessageType.SetProperty: {
              const { name, value } = content || {}
              if (!name)
                throw new Error(`Field 'name' must be provided for '${MessageType.SetProperty}' messages`)
              if (value === undefined)
                throw new Error(`Field 'value' must be provided for '${MessageType.SetProperty}' messages`)
              console.debug(`[Sprigma] ðŸ“¦ Setting property Sprig.${name} to value:`, value)
              setProperty(name, value)
              break
            }

            case MessageType.GetPermissionToShowSurvey: {
              const { surveyId, canShow } = content || {}
              if (!surveyId)
                throw new Error(
                  `Field 'surveyId' must be provided for '${MessageType.GetPermissionToShowSurvey}' messages`,
                )
              if (canShow === undefined)
                throw new Error(
                  `Field 'canShow' must be provided for '${MessageType.GetPermissionToShowSurvey}' messages`,
                )
              console.debug(
                `[Sprigma] ðŸ“¦ Received message from parent regarding permission to show survey ${surveyId}, canShow = ${canShow}`,
              )
              if (outstandingRequestsForPermissionToShowSurvey[surveyId]) {
                outstandingRequestsForPermissionToShowSurvey[surveyId].callback(canShow)
              } else {
                console.debug(
                  `[Sprigma] ðŸ“¦ Outstanding request for permission to show survey ${surveyId} was not found. It may have timed out`,
                )
              }
              break
            }

            default:
              throw new Error(`Unknown message of type ${type} received`)
          }
        }

        window.addEventListener('message', function (event) {
          console.debug(`[Sprigma] ðŸ“¦ Message received from ${event.origin}`)

          if (event.origin !== parentUrl) {
            console.warn(`[Sprigma] ðŸ“¦ Ignoring message from unexpected origin ${event.origin}`)
            return
          }
          if (!isSDKReady) {
            console.warn('[Sprigma] ðŸ“¦ Received message when Sprig SDK is not yet ready')
            return
          }
          processMessage(event.data)
        })

        window.addEventListener('error', function (error) {
          console.error(`[Sprigma] ðŸ“¦ ${error.message}`)
          messageParent({
            type: MessageType.Error,
            content: {
              message: error.message,
              filename: error.filename,
              lineno: error.lineno,
              colno: error.colno,
            },
          })
        })
      })('https://www.figma.com', 1686806888888)
    </script>
    <script>
      (function(l,e,a,p) {
        if (window.Sprig) return;
        window.Sprig = function(){S._queue.push(arguments)}
        var S = window.Sprig;S.appId = a;S._queue = [];window.UserLeap=S;
        a=l.createElement('script');
        a.async=1;a.src=e+'?id='+S.appId;
        p=l.getElementsByTagName('script')[0];
        p.parentNode.insertBefore(a, p);
      })(document, 'https://cdn.sprig.com/shim.js', 'YWwyCyGyqg');
    </script>
  

</body></html>